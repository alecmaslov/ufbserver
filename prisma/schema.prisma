// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Platform {
  WEB
  ANDROID
  IOS
  STEAM
  UNITY_EDITOR
}

// represents a client device
// we can authenticate JWT which will contain this id
model Client {
  id        String   @id @default(cuid())
  userId    String?
  platform  Platform @default(WEB)
  createdAt DateTime @default(now())

  user             User?              @relation(fields: [userId], references: [id]) // a client can be registered or not
  gameSession      GameSession[]
  player           Player[]
  ConnectedBrowser ConnectedBrowser[]
}

model User {
  id              String   @id @default(cuid())
  displayName     String
  email           String   @unique
  profileImageUrl String?
  passwordHash    String? // let's keep the possibility open to have oauth, so pw is not required if they sign in with oauth
  createdAt       DateTime @default(now())

  client    Client[] // user could potentially have multiple clients
  character Character[]
}

model GameSession {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  hostClientId String // the client that created the session

  hostClient       Client             @relation(fields: [hostClientId], references: [id])
  player           Player[]
  gameSessionState GameSessionState[]
}

model Player {
  id            String   @id @default(cuid())
  clientId      String
  gameSessionId String
  lastSeen      DateTime @default(now())

  client          Client            @relation(fields: [clientId], references: [id])
  gameSession     GameSession       @relation(fields: [gameSessionId], references: [id])
  playerGameState PlayerGameState[]
}

model PlayerGameState {
  id       String @id @default(cuid())
  playerId String

  player Player @relation(fields: [playerId], references: [id])

  // some stuff representing state of the player in the game
  energy Int
  health Int

  // we could also have a player inventory or something
}

model GameSessionState {
  id            String      @id @default(cuid())
  gameSessionId String
  gameSession   GameSession @relation(fields: [gameSessionId], references: [id])

  // some stuff representing global game state
}

// an s3 bucket asset
model Asset {
  objectKey  String @id // the s3 object key
  bucketName String
  region     String

  bundleAsset BundleAsset[]
}

// represents the assets needed for a certain unity build bundle
// necessary for starting the game
model BundleAsset {
  id      String @id @default(cuid())
  version String
  assetId String
  asset   Asset  @relation(fields: [assetId], references: [objectKey])
}

// what if we have the same map name, but different sizes? Maybe id should
// be cuid
model UfbMap {
  id              String  @id @default(cuid())
  name            String
  resourceAddress String?
  thumbnailUrl    String?
  description     String?
  gridWidth       Int
  gridHeight      Int
  publisher       String? // could also be tied to a userId
  isPublished     Boolean @default(false)

  tiles Tile[]
}

enum TileType {
  Default
  Bridge
  Floor
  Void
  Chest
  Enemy
  Portal
}

model Tile {
  id         String   @id @default(cuid())
  tileCode   String // previously the id, looks like "tile_A_1"
  mapId      String
  x          Int
  y          Int
  type       TileType @default(Default)
  walls      Json?
  legacyCode String? // for backwards compatibility

  map                 UfbMap          @relation(fields: [mapId], references: [id], onDelete: Cascade)
  fromTileAdjacencies TileAdjacency[] @relation("FromAdjacency")
  toTileAdjacencies   TileAdjacency[] @relation("ToAdjacency")
  tileAdjacencies     TileAdjacency[]
  spawnZone           SpawnZone[]

  @@unique([tileCode, mapId])
  @@unique([x, y, mapId])
}

enum SpawnZoneType {
  Merchant
  Portal
  Monster
  Chest
}

model SpawnZone {
  id     String        @id @default(cuid())
  type   SpawnZoneType
  seedId Int
  tileId String        @unique
  tile   Tile          @relation(fields: [tileId], references: [id], onDelete: Cascade)
}

enum AdjacencyType {
  Basic
  OverBridge
  UnderBridge
  Wall
  Void
}

model TileAdjacency {
  id         String        @id @default(cuid()) // can there be multiple adjacencies between 2 tiles? 
  // Maybe we can make id a compund between to and from instead
  fromId     String // FROM IS ALWAYS THE OWNER OF THE ADJACENCY
  toId       String
  type       AdjacencyType
  energyCost Int?

  from   Tile    @relation("FromAdjacency", fields: [fromId], references: [id], onDelete: Cascade)
  to     Tile    @relation("ToAdjacency", fields: [toId], references: [id], onDelete: Cascade)
  tile   Tile?   @relation(fields: [tileId], references: [id], onDelete: Cascade)
  tileId String?

  @@unique([fromId, toId])
}

// if we normalize tiles and adjacency list, we can track in-game actions to 
// those tiles, query them, do more stuff with them

model ConnectedBrowser {
  ipAddress      String    @id
  clientId       String
  connectedAt    DateTime  @default(now())
  disconnectedAt DateTime?

  client Client @relation(fields: [clientId], references: [id])
}

// a base class for a characterm, e.g. "Kirin"
// each base class will have a base set of abilities that are inherited by characters
model CharacterClass {
  name         String  @id
  description  String?
  avatarUrl    String?
  cardUrl      String?
  sketchfabUrl String?
  ultimateMove String  @default("None")

  characterToken Character[]
  godLevelNft    GodLevelNft?

  @@map("character_class")
}

// an instance of an owned characterâˆ‚
model Character {
  id        String  @id @default(cuid())
  name      String  @unique // e.g. "Kirin-#005"
  traits    Json?
  className String // the class of this character
  ownerId   String? // the user that owns this character
  nftId     String? @unique // the nft that represents this character

  characterClass CharacterClass @relation(fields: [className], references: [name])
  owner          User?          @relation(fields: [ownerId], references: [id])
  nft            Nft?           @relation(fields: [nftId], references: [id])

  @@map("character_token")
}

// a single nft token
model Nft {
  id                 String  @id @default(cuid())
  name               String
  tokenId            String
  contractAddress    String
  tokenUri           String // this holds the attributes and other data about the token
  tokenHolderAddress String
  tokenHolderName    String?
  tokenHolderUrl     String?

  character   Character?
  contract    NftContract  @relation(fields: [contractAddress], references: [address], onDelete: Cascade)
  godLevelNft GodLevelNft?

  @@unique([contractAddress, tokenId])
  @@map("nft")
}

model NftContract {
  address          String  @id
  name             String
  slug             String?
  symbol           String
  totalSupply      Int
  tokenType        String
  contractDeployer String
  imageUrl         String?
  description      String?
  externalUrl      String?
  twitterUsername  String?
  discordUrl       String?
  bannerImageUrl   String?
  chainId          String  @default("ethereum")
  nfts             Nft[]

  @@map("nft_contract")
}

// ownership of the intellectual property of the characters, different than normal nfts
model GodLevelNft {
  characterClassName String  @unique
  nftId              String  @unique
  isPublished        Boolean @default(false)

  nft            Nft            @relation(fields: [nftId], references: [id], onDelete: Cascade)
  characterClass CharacterClass @relation(fields: [characterClassName], references: [name], onDelete: Cascade)

  @@map("god_level_nft")
}




// ======================== Game Items ========================

enum ResourceType {
  Health
  Energy
  Mana
  Melee
  Gold
  Item
}

enum ActionType {
  Damage
  Heal
  Buff
  Debuff
  SetMax
  Summon
  Stack
  Utility
}


model Item {
  id          String  @id @default(cuid())
  name        String
  category    String
  description String?

  nftId String? @unique // the nft that represents this item
}


model ItemBehavior {
  id String @id @default(cuid())
  
}
