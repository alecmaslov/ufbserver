// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Platform {
  WEB
  ANDROID
  IOS
  STEAM
  UNITY_EDITOR
}

// represents a client device
// we can authenticate JWT which will contain this id
model Client {
  id        String   @id @default(cuid())
  userId    String?
  platform  Platform @default(WEB)
  createdAt DateTime @default(now())

  user        User?         @relation(fields: [userId], references: [id]) // a client can be registered or not
  gameSession GameSession[]
  player      Player[]
}

model User {
  id              String   @id @default(cuid())
  displayName     String
  email           String   @unique
  profileImageUrl String?
  passwordHash    String? // let's keep the possibility open to have oauth, so pw is not required if they sign in with oauth
  createdAt       DateTime @default(now())

  client Client[] // user could potentially have multiple clients
}

model GameSession {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  hostClientId String // the client that created the session

  hostClient       Client             @relation(fields: [hostClientId], references: [id])
  player           Player[]
  gameSessionState GameSessionState[]
}

model Player {
  id            String   @id @default(cuid())
  clientId      String
  gameSessionId String
  lastSeen      DateTime @default(now())

  client          Client            @relation(fields: [clientId], references: [id])
  gameSession     GameSession       @relation(fields: [gameSessionId], references: [id])
  playerGameState PlayerGameState[]
}

model PlayerGameState {
  id       String @id @default(cuid())
  playerId String

  player Player @relation(fields: [playerId], references: [id])

  // some stuff representing state of the player in the game
  energy Int
  health Int

  // we could also have a player inventory or something
}

model GameSessionState {
  id            String      @id @default(cuid())
  gameSessionId String
  gameSession   GameSession @relation(fields: [gameSessionId], references: [id])

  // some stuff representing global game state
}

// an s3 bucket asset
model Asset {
  objectKey  String @id // the s3 object key
  bucketName String
  region     String

  bundleAsset BundleAsset[]
}

// represents the assets needed for a certain unity build bundle
// necessary for starting the game
model BundleAsset {
  id      String @id @default(cuid())
  version String
  assetId String
  asset   Asset  @relation(fields: [assetId], references: [objectKey])
}

// what if we have the same map name, but different sizes? Maybe id should
// be cuid
model UfbMap {
  id              String  @id @default(cuid())
  name            String
  resourceAddress String?
  thumbnailUrl    String?
  description     String?
  gridWidth       Int
  gridHeight      Int
  publisher       String? // could also be tied to a userId

  tiles Tile[]
}

enum TileType {
  Default
  Bridge
  Floor
  Void
  Chest
  Enemy
  Portal
}

model Tile {
  id         String   @id @default(cuid())
  tileCode   String // previously the id, looks like "tile_A_1"
  mapId      String
  x          Int
  y          Int
  type       TileType @default(Default)
  walls      Json?
  legacyCode String? // for backwards compatibility

  map                 UfbMap          @relation(fields: [mapId], references: [id], onDelete: Cascade)
  fromTileAdjacencies TileAdjacency[] @relation("FromAdjacency")
  toTileAdjacencies   TileAdjacency[] @relation("ToAdjacency")
  tileAdjacency       TileAdjacency[]

  @@unique([tileCode, mapId])
  @@unique([x, y, mapId])
}

enum AdjacencyType {
  Basic
  Bridge
  Portal
}

model TileAdjacency {
  id         String        @id @default(cuid()) // can there be multiple adjacencies between 2 tiles? 
  // Maybe we can make id a compund between to and from instead
  fromId     String // FROM IS ALWAYS THE OWNER OF THE ADJACENCY
  toId       String
  type       AdjacencyType
  energyCost Int?

  from   Tile    @relation("FromAdjacency", fields: [fromId], references: [id], onDelete: Cascade)
  to     Tile    @relation("ToAdjacency", fields: [toId], references: [id], onDelete: Cascade)
  tile   Tile?   @relation(fields: [tileId], references: [id], onDelete: Cascade)
  tileId String?
}

// if we normalize tiles and adjacency list, we can track in-game actions to 
// those tiles, query them, do more stuff with them
